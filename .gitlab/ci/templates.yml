variables:
  ## This value MUST be the same as `opam_repository_tag` in `scripts/version.sh`
  build_deps_image_version: b53a5e8c3fa7764d5ae6567d7a817315507c9f0d
  build_deps_image_name: registry.gitlab.com/tezos/opam-repository
  GIT_STRATEGY: fetch
  GIT_DEPTH: "1"
  GET_SOURCES_ATTEMPTS: "2"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "2"
  # Sets the number of tries before failing opam downloads.
  OPAMRETRIES: "5"

  TEZOS_DEFAULT_BRANCH: "master"
  TEZOS_DEFAULT_NAMESPACE: "tezos"

# Basic, specialised, minimal, orthogonal templates

# Some settings we want by default on all jobs
.default_settings_template:
  interruptible: true
  # `dependencies` are empty be default. Each individual job or
  # template requiring artifacts from preceeding jobs should declare
  # their dependencies locally.
  dependencies: []

# Image templates
.image_template__runtime_build_test_dependencies_template:
  image: ${build_deps_image_name}:runtime-build-test-dependencies--${build_deps_image_version}

.image_template__runtime_build_dependencies_template:
  image: ${build_deps_image_name}:runtime-build-dependencies--${build_deps_image_version}

.image_template__runtime_prebuild_dependencies_template:
  image: ${build_deps_image_name}:runtime-prebuild-dependencies--${build_deps_image_version}

.image_template__latest:
  image: docker:latest

# Rules template

# Rules for all the jobs that need to be run on development branches (typically
# those that have an MR, but also some experiments, etc.)
.rules_template__development:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_COMMIT_TAG != null && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: on_success

# Same as .rules_template__development, but for manual jobs.
.rules_template__development_manual:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_COMMIT_TAG != null && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: manual

# Rules for all the jobs that are run only for the master branch and the like
# (tags, releases, etc.)
.rules_template__master_and_releases:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        MASTER_OR_RELEASE: "true"
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        MASTER_OR_RELEASE: "true"
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        MASTER_OR_RELEASE: "true"
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        MASTER_OR_RELEASE: "true"
    - when: never

# Rules for all the jobs that are run only for the master branch
.rules_template__master:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    - when: never

# Rules for all the jobs that are run only on release tags
.rules_template__release_tag:
  rules:
    - if: '$CI_COMMIT_TAG =~ /\A\d+\.\d+\.\d+\z/ && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    - when: never

# Rules for specific topics: doc, opam, etc.
.rules_template__development_documentation:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_ID'
      changes:
        - docs/introduction/*.sh
      when: always
    # Run when there is label on the merge request.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--docs(?:$|[,])/'
      when: always
    - when: manual
      allow_failure: true

# The job `unified_coverage` runs on master and one development pipelines. It
# runs on merge requests, unless the `ci--no-coverage` tag is set.
.rules_template__development_unified_coverage:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_COMMIT_TAG != null && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # Disable this job when the MR has the label `ci--no-coverage`
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--no-coverage(?:$|[,])/'
      when: never
    - when: on_success

.rules_template__development_arm64:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /arm64/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /arm64/'
      when: always
    # Run when there is label on the merge request.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--arm64(?:$|[,])/'
      when: always
    - when: manual
      allow_failure: true

.rules_template__development_docker:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /docker/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /docker/'
      when: on_success
    # Run when there is label on the merge request.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--docker(?:$|[,])/'
      when: on_success
    - if: $CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: manual
      allow_failure: true
    - when: never

.rules_template__extended_test_pipeline:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    - when: never

.rules_template__trigger_opam_pipeline:
  rules:
    # Run on push to the default branch (i.e master).
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH'
      when: always
    # Run on scheduled builds.
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    # Run when the branch name contains the `opam` keyword.
    - if: '$CI_COMMIT_BRANCH =~ /opam/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /opam/'
      when: always
    # Run when there is label on the merge request.
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--opam(?:$|[,])/'
      when: always
    # Run on merge requests when opam changes are detected.
    - if: '$CI_MERGE_REQUEST_ID'
      changes:
        - "**/dune"
        - "**/dune.inc"
        - "**/*.dune.inc"
        - "**/dune-project"
        - "**/dune_protocol.*"
        - "**/*.opam"
        - scripts/version.sh
        - .gitlab-ci.yml
      when: always
    - when: never # default

# Job templates

# This template is used by the opam test jobs in the child pipeline
# triggered by `packaging.yml`.
.opam_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_prebuild_dependencies_template
    # Note that the rules for jobs in the child pipeline must be the
    # same as that of the generator job (`opam:create_pipeline`) and
    # the child pipeline triggerer (`opam:trigger`).
    - .rules_template__trigger_opam_pipeline
  stage: packaging
  # FIXME: https://gitlab.com/nomadic-labs/tezos/-/issues/663
  # FIXME: https://gitlab.com/nomadic-labs/tezos/-/issues/664
  # At the time of writing, the opam tests were quite flaky.
  # Therefore, a retry was added. This should be removed once the
  # underlying tests have been fixed.
  retry: 2
  script:
    - ./scripts/opam-pin.sh
    - opam depext --yes ${package}
    - opam install --yes ${package}
    - opam reinstall --yes --with-test ${package}
  after_script:
    # Stores logs in opam_logs/ for artifacts and outputs an excerpt on failure.
    - OPAM_LOGS=opam_logs/ ./scripts/ci/opam_handle_output.sh
  artifacts:
    paths:
      - opam_logs/
    expire_in: 1 week
    when: always

# Add variables for bisect_ppx instrumentation
.template__coverage:
  variables:
    COVERAGE_OPTIONS: --instrument-with bisect_ppx
    BISECT_FILE: $CI_PROJECT_DIR/_coverage_output/
    SLACK_COVERAGE_CHANNEL: C02PHBE7W73

# Merge coverage files after the execution
.template__coverage_files:
  extends: .template__coverage
  after_script:
    - COVERAGE_MERGED=$(echo $CI_JOB_NAME | sed -r 's/[\/_ ]/-/g')
    # If the merge fails, we upload a corrupted coverage file for the test job
    - bisect-ppx-report merge --coverage-path $BISECT_FILE $COVERAGE_MERGED.coverage
      || { COVERAGE_MERGED=$COVERAGE_MERGED.corrupted; echo "" > $COVERAGE_MERGED.coverage; }
    # If there is nothing to remove we still want to continue and move the corrupted file
    - rm $BISECT_FILE*.coverage || true
    - mv $COVERAGE_MERGED.coverage $BISECT_FILE
  artifacts:
    name: "coverage-files-$CI_JOB_NAME"
    paths:
      - $BISECT_FILE
    expire_in: 1 day
    when: on_success

.build_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_test_dependencies_template
    - .template__coverage
  stage: build
  before_script:
    - . ./scripts/version.sh
    # Load the environment poetry previously created in the docker image.
    # Give access to the Python dependencies/executables
    - . $HOME/.venv/bin/activate

# Setup authentication for either Docker Hub (release) or GitLab registry (dev).
# Also setup Docker names such that they are valid for the target (Docker Hub or GitLab).
# Docker constraints on tags: https://docs.docker.com/engine/reference/commandline/tag/
#
#   A tag name must be valid ASCII and may contain lowercase and
#   uppercase letters, digits, underscores, periods and dashes. A tag
#   name may not start with a period or a dash and may contain a maximum
#   of 128 characters.
#
# To detect dev mode we test the value of $CI_REGISTRY.
# GitLab image name must follow this format:
# https://docs.gitlab.com/ee/user/packages/container_registry/#image-naming-convention
.docker_registry_auth:
  before_script:
    - mkdir ~/.docker || true
    - if [ "$MASTER_OR_RELEASE" = "true" ]; then
        export DOCKER_IMAGE_NAME="docker.io/${CI_PROJECT_PATH}-" ;
        echo "{ \"auths\":{ \"https://index.docker.io/v1/\":{ \"auth\":\"${CI_DOCKER_AUTH}\" } } }" > ~/.docker/config.json ;
      else
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY ;
        export DOCKER_IMAGE_NAME="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/" ;
      fi
    - TAG_NAME=$(echo "${IMAGE_ARCH_PREFIX}${CI_COMMIT_REF_NAME}" | tr -c -- '-._\n[:alnum:]' '_')
    - echo "Building images ${DOCKER_IMAGE_NAME%?} ( /bare & /debug ) ${TAG_NAME}"

.template__code_quality:
  variables:
    CODE_QUALITY_REPORT: "_reports/gl-code-quality-report.json"
