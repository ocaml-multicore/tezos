tests_012/test_contract.py::TestTypecheck::test_typecheck[mini_scenarios/generic_multisig.tz]

Well typed
Gas remaining: 1039928.421 units remaining
{ parameter
    (or (unit %default)
        (pair %main
           (pair :payload
              (nat %counter)
              (or :action
                 (lambda %operation unit (list operation))
                 (pair %change_keys (nat %threshold) (list %keys key))))
           (list %sigs (option signature)))) ;
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
  code { UNPAIR
         /* [ @parameter or (unit %default)
               (pair %main
                  (pair :payload
                     (nat %counter)
                     (or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))))
                  (list %sigs (option signature)))
            : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
         IF_LEFT
           { DROP
             /* [ @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             NIL operation
             /* [ list operation
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             PAIR
             /* [ pair (list operation)
                     (pair @storage (nat %stored_counter) (nat %threshold) (list %keys key)) ] */ }
           { PUSH mutez
                  0
             /* [ mutez
                : @parameter.main pair (pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key))))
                     (list %sigs (option signature))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             AMOUNT
             /* [ @amount mutez : mutez
                : @parameter.main pair (pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key))))
                     (list %sigs (option signature))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             ASSERT_CMPEQ ;
             SWAP
             /* [ @storage pair (nat %stored_counter) (nat %threshold) (list %keys key)
                : @parameter.main pair (pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key))))
                     (list %sigs (option signature)) ] */ ;
             DUP
             /* [ @storage pair (nat %stored_counter) (nat %threshold) (list %keys key)
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key)
                : @parameter.main pair (pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key))))
                     (list %sigs (option signature)) ] */ ;
             DIP { SWAP
                   /* [ @parameter.main pair (pair :payload
                              (nat %counter)
                              (or :action
                                 (lambda %operation unit (list operation))
                                 (pair %change_keys (nat %threshold) (list %keys key))))
                           (list %sigs (option signature))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ @storage pair (nat %stored_counter) (nat %threshold) (list %keys key)
                : @parameter.main pair (pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key))))
                     (list %sigs (option signature))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             DIP { UNPAIR
                   /* [ pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   DUP
                   /* [ pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   SELF
                   /* [ @self contract unit
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   ADDRESS
                   /* [ @self.address address
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   CHAIN_ID
                   /* [ chain_id : @self.address address
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   PAIR
                   /* [ pair chain_id (address @self.address)
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   PAIR
                   /* [ pair (pair chain_id (address @self.address))
                           (pair :payload
                              (nat %counter)
                              (or :action
                                 (lambda %operation unit (list operation))
                                 (pair %change_keys (nat %threshold) (list %keys key))))
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   PACK
                   /* [ @packed bytes
                      : pair :payload
                        (nat %counter)
                        (or :action
                           (lambda %operation unit (list operation))
                           (pair %change_keys (nat %threshold) (list %keys key)))
                      : list (option signature)
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   DIP { UNPAIR @counter
                         /* [ @counter nat
                            : or :action
                              (lambda %operation unit (list operation))
                              (pair %change_keys (nat %threshold) (list %keys key))
                            : list (option signature)
                            : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                         DIP { SWAP
                               /* [ list (option signature)
                                  : or :action
                                    (lambda %operation unit (list operation))
                                    (pair %change_keys (nat %threshold) (list %keys key))
                                  : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                         /* [ @counter nat : list (option signature)
                            : or :action
                              (lambda %operation unit (list operation))
                              (pair %change_keys (nat %threshold) (list %keys key))
                            : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                   /* [ @packed bytes : @counter nat : list (option signature)
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   SWAP
                   /* [ @counter nat : @packed bytes : list (option signature)
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ @storage pair (nat %stored_counter) (nat %threshold) (list %keys key)
                : @counter nat : @packed bytes : list (option signature)
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             UNPAIR @stored_counter
             /* [ @stored_counter nat : pair (nat %threshold) (list %keys key) : @counter nat
                : @packed bytes : list (option signature)
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             DIP { SWAP
                   /* [ @counter nat : pair (nat %threshold) (list %keys key) : @packed bytes
                      : list (option signature)
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ @stored_counter nat : @counter nat : pair (nat %threshold) (list %keys key)
                : @packed bytes : list (option signature)
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             ASSERT_CMPEQ ;
             DIP { SWAP
                   /* [ list (option signature) : @packed bytes
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ pair (nat %threshold) (list %keys key) : list (option signature)
                : @packed bytes
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             UNPAIR @threshold @keys
             /* [ @threshold nat : @keys list key : list (option signature) : @packed bytes
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             DIP { PUSH @valid
                     nat
                     0
                   /* [ @valid nat : @keys list key : list (option signature) : @packed bytes
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   SWAP
                   /* [ @keys list key : @valid nat : list (option signature) : @packed bytes
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                   ITER { DIP { SWAP
                                /* [ list (option signature) : @valid nat : @packed bytes
                                   : or :action
                                     (lambda %operation unit (list operation))
                                     (pair %change_keys (nat %threshold) (list %keys key))
                                   : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                          /* [ @keys.elt key : list (option signature) : @valid nat : @packed bytes
                             : or :action
                               (lambda %operation unit (list operation))
                               (pair %change_keys (nat %threshold) (list %keys key))
                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                          SWAP
                          /* [ list (option signature) : @keys.elt key : @valid nat : @packed bytes
                             : or :action
                               (lambda %operation unit (list operation))
                               (pair %change_keys (nat %threshold) (list %keys key))
                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                          IF_CONS
                            { IF_SOME
                                { SWAP
                                  /* [ @tl list (option signature) : @hd.some signature : @keys.elt key
                                     : @valid nat : @packed bytes
                                     : or :action
                                       (lambda %operation unit (list operation))
                                       (pair %change_keys (nat %threshold) (list %keys key))
                                     : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                  DIP { SWAP
                                        /* [ @keys.elt key : @hd.some signature : @valid nat : @packed bytes
                                           : or :action
                                             (lambda %operation unit (list operation))
                                             (pair %change_keys (nat %threshold) (list %keys key))
                                           : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                        DIIP { DUUP
                                               /* [ bytes : @valid nat : @packed bytes
                                                  : or :action
                                                    (lambda %operation unit (list operation))
                                                    (pair %change_keys (nat %threshold) (list %keys key))
                                                  : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                                        /* [ @keys.elt key : @hd.some signature : bytes : @valid nat : @packed bytes
                                           : or :action
                                             (lambda %operation unit (list operation))
                                             (pair %change_keys (nat %threshold) (list %keys key))
                                           : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                        { DUUUP
                                          /* [ bytes : @keys.elt key : @hd.some signature : bytes : @valid nat
                                             : @packed bytes
                                             : or :action
                                               (lambda %operation unit (list operation))
                                               (pair %change_keys (nat %threshold) (list %keys key))
                                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                          DIP { CHECK_SIGNATURE
                                                /* [ bool : @valid nat : @packed bytes
                                                   : or :action
                                                     (lambda %operation unit (list operation))
                                                     (pair %change_keys (nat %threshold) (list %keys key))
                                                   : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                                          /* [ bytes : bool : @valid nat : @packed bytes
                                             : or :action
                                               (lambda %operation unit (list operation))
                                               (pair %change_keys (nat %threshold) (list %keys key))
                                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                          SWAP
                                          /* [ bool : bytes : @valid nat : @packed bytes
                                             : or :action
                                               (lambda %operation unit (list operation))
                                               (pair %change_keys (nat %threshold) (list %keys key))
                                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                          IF { DROP
                                               /* [ @valid nat : @packed bytes
                                                  : or :action
                                                    (lambda %operation unit (list operation))
                                                    (pair %change_keys (nat %threshold) (list %keys key))
                                                  : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                                             { FAILWITH /* [] */ } } ;
                                        PUSH nat
                                             1
                                        /* [ nat : @valid nat : @packed bytes
                                           : or :action
                                             (lambda %operation unit (list operation))
                                             (pair %change_keys (nat %threshold) (list %keys key))
                                           : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                        ADD @valid
                                        /* [ @valid nat : @packed bytes
                                           : or :action
                                             (lambda %operation unit (list operation))
                                             (pair %change_keys (nat %threshold) (list %keys key))
                                           : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                                  /* [ @tl list (option signature) : @valid nat : @packed bytes
                                     : or :action
                                       (lambda %operation unit (list operation))
                                       (pair %change_keys (nat %threshold) (list %keys key))
                                     : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                                { SWAP
                                  /* [ @keys.elt key : @tl list (option signature) : @valid nat : @packed bytes
                                     : or :action
                                       (lambda %operation unit (list operation))
                                       (pair %change_keys (nat %threshold) (list %keys key))
                                     : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
                                  DROP
                                  /* [ @tl list (option signature) : @valid nat : @packed bytes
                                     : or :action
                                       (lambda %operation unit (list operation))
                                       (pair %change_keys (nat %threshold) (list %keys key))
                                     : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ } }
                            { FAIL } ;
                          SWAP
                          /* [ @valid nat : @tl list (option signature) : @packed bytes
                             : or :action
                               (lambda %operation unit (list operation))
                               (pair %change_keys (nat %threshold) (list %keys key))
                             : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
                   /* [ @valid nat : list (option signature) : @packed bytes
                      : or :action
                        (lambda %operation unit (list operation))
                        (pair %change_keys (nat %threshold) (list %keys key))
                      : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ @threshold nat : @valid nat : list (option signature) : @packed bytes
                : or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             ASSERT_CMPLE ;
             IF_CONS
               { FAIL }
               { /* [ @packed bytes
                    : or :action
                      (lambda %operation unit (list operation))
                      (pair %change_keys (nat %threshold) (list %keys key))
                    : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ } ;
             DROP
             /* [ or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : @storage pair (nat %stored_counter) (nat %threshold) (list %keys key) ] */ ;
             DIP { UNPAIR
                   /* [ nat : pair (nat %threshold) (list %keys key) ] */ ;
                   PUSH nat 1
                   /* [ nat : nat : pair (nat %threshold) (list %keys key) ] */ ;
                   ADD @new_counter
                   /* [ @new_counter nat : pair (nat %threshold) (list %keys key) ] */ ;
                   PAIR
                   /* [ pair (nat @new_counter) (nat %threshold) (list %keys key) ] */ }
             /* [ or :action
                  (lambda %operation unit (list operation))
                  (pair %change_keys (nat %threshold) (list %keys key))
                : pair (nat @new_counter) (nat %threshold) (list %keys key) ] */ ;
             IF_LEFT
               { UNIT
                 /* [ unit : @operation lambda unit (list operation)
                    : pair (nat @new_counter) (nat %threshold) (list %keys key) ] */ ;
                 EXEC
                 /* [ list operation
                    : pair (nat @new_counter) (nat %threshold) (list %keys key) ] */ }
               { DIP { CAR /* [ @new_counter nat ] */ }
                 /* [ @change_keys pair (nat %threshold) (list %keys key) : @new_counter nat ] */ ;
                 SWAP
                 /* [ @new_counter nat : @change_keys pair (nat %threshold) (list %keys key) ] */ ;
                 PAIR
                 /* [ pair (nat @new_counter) (pair @change_keys (nat %threshold) (list %keys key)) ] */ ;
                 NIL operation
                 /* [ list operation
                    : pair (nat @new_counter) (pair @change_keys (nat %threshold) (list %keys key)) ] */ } ;
             PAIR
             /* [ pair (list operation) (nat @new_counter) (nat %threshold) (list %keys key) ] */ } } }
