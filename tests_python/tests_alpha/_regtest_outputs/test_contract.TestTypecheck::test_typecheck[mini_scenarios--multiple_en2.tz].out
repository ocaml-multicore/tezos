tests_alpha/test_contract.py::TestTypecheck::test_typecheck[mini_scenarios/multiple_en2.tz]

Well typed
Gas remaining: 1039921.322 units remaining
{ parameter unit ;
  storage (option address) ;
  code { SENDER
         /* [ address : pair unit (option address) ] */ ;
         SELF
         /* [ contract unit : address : pair unit (option address) ] */ ;
         ADDRESS
         /* [ address : address : pair unit (option address) ] */ ;
         { /* [ pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */
           COMPARE
           /* [ mutez : mutez : pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */ ;
           EQ
           /* [ bool : pair unit (option address) ] */ ;
           IF { CDR
                /* [ option address ] */ ;
                { /* [ mutez : mutez : pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */
                  IF_NONE
                    { { /* [ pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */
                        UNIT
                        /* [ unit ] */ ;
                        FAILWITH
                        /* [] */ } }
                    { /* [ pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */ }
                  /* [ bool : pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */ } ;
                DIP { NIL operation
                          /* [ pair (or (or (nat %add) (nat %sub)) (unit %default)) int
                             : pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */
                      /* [ list operation ] */ }
                /* [] */ ;
                DUP
                /* [ or (or (nat %add) (nat %sub)) (unit %default)
                   : pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */ ;
                CONTRACT %add unit
                /* [ or (or (nat %add) (nat %sub)) (unit %default) : int ] */ ;
                { /* [ pair (or (or (nat %add) (nat %sub)) (unit %default)) int ] */
                  IF_NONE
                    { /* [ address : list operation ] */ }
                    { { UNIT /* [ int ] */ ; FAILWITH /* [] */ } } } ;
                DUP
                /* [ int : nat ] */ ;
                CONTRACT %fact nat
                /* [ int ] */ ;
                { /* [ unit : int ] */
                  IF_NONE { /* [] */ } { { UNIT /* [ list operation : int ] */ ; FAILWITH /* [] */ } }
                  /* [] */ } ;
                DUP
                /* [ pair (list operation) int ] */ ;
                CONTRACT %add nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 12
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT unit
                /* [ option (contract unit) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract unit : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract unit : address : list operation ] */ ;
                PUSH unit Unit
                /* [ unit : mutez : contract unit : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT %sub nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 3
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DUP
                /* [ address : address : list operation ] */ ;
                CONTRACT %add nat
                /* [ option (contract nat) : address : list operation ] */ ;
                { IF_NONE
                    { { UNIT /* [ unit : address : list operation ] */ ; FAILWITH /* [] */ } }
                    { /* [ contract nat : address : list operation ] */ } } ;
                PUSH mutez 0
                /* [ mutez : contract nat : address : list operation ] */ ;
                PUSH nat 5
                /* [ nat : mutez : contract nat : address : list operation ] */ ;
                TRANSFER_TOKENS
                /* [ operation : address : list operation ] */ ;
                SWAP
                /* [ address : operation : list operation ] */ ;
                DIP { CONS /* [ list operation ] */ }
                /* [ address : list operation ] */ ;
                DROP
                /* [ list operation ] */ ;
                DIP { NONE address /* [ option address ] */ }
                /* [ list operation : option address ] */ ;
                PAIR
                /* [ pair (list operation) (option address) ] */ }
              { CAR
                /* [ unit ] */ ;
                DUP
                /* [ unit : unit ] */ ;
                DIP { DIP { PUSH int 0
                            /* [ int ] */ ;
                            PUSH mutez 0
                            /* [ mutez : int ] */ ;
                            NONE key_hash
                            /* [ option key_hash : mutez : int ] */ }
                      /* [ unit : option key_hash : mutez : int ] */ ;
                      DROP
                      /* [ option key_hash : mutez : int ] */ ;
                      CREATE_CONTRACT
                        { parameter (or (or (nat %add) (nat %sub)) (unit %default)) ;
                          storage int ;
                          code { AMOUNT ;
                                 PUSH mutez 0 ;
                                 { { COMPARE ; EQ } ; IF {} { { UNIT ; FAILWITH } } } ;
                                 { { DUP ; CAR ; DIP { CDR } } } ;
                                 IF_LEFT
                                   { IF_LEFT { ADD } { SWAP ; SUB } }
                                   { DROP ; DROP ; PUSH int 0 } ;
                                 NIL operation ;
                                 PAIR } }
                      /* [ operation : address ] */ }
                /* [ unit : operation : address ] */ ;
                DIP { SELF
                      /* [ contract unit : operation : address ] */ ;
                      PUSH mutez 0
                      /* [ mutez : contract unit : operation : address ] */ }
                /* [ unit : mutez : contract unit : operation : address ] */ ;
                TRANSFER_TOKENS
                /* [ operation : operation : address ] */ ;
                NIL operation
                /* [ list operation : operation : operation : address ] */ ;
                SWAP
                /* [ operation : list operation : operation : address ] */ ;
                CONS
                /* [ list operation : operation : address ] */ ;
                SWAP
                /* [ operation : list operation : address ] */ ;
                CONS
                /* [ list operation : address ] */ ;
                DIP { SOME /* [ option address ] */ }
                /* [ list operation : option address ] */ ;
                PAIR
                /* [ pair (list operation) (option address) ] */ } } } }
